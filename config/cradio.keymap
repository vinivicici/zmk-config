#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    behaviors {
        asl: alpha_shift_l {
            compatible = "zmk,behavior-hold-tap";
            label = "ASL";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <170>;
            flavor = "balanced";
            hold-trigger-key-positions = <32 33>;
            hold-trigger-on-release;
        };

        asr: alpha_shift_r {
            compatible = "zmk,behavior-hold-tap";
            label = "ASR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <30 31>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <170>;
            flavor = "balanced";
            hold-trigger-on-release;
        };

        aml: alpha_mods_l {
            compatible = "zmk,behavior-hold-tap";
            label = "AML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <170>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <32 33>;
        };

        amr: alpha_mods_r {
            compatible = "zmk,behavior-hold-tap";
            label = "AMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <170>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <30 31>;
        };

        ht: ht {
            compatible = "zmk,behavior-hold-tap";
            label = "HT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    combos {
        compatible = "zmk,combos";

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
            layers = <0>;
            timeout-ms = <40>;
            require-prior-idle-ms = <150>;
        };

        del {
            bindings = <&kp DEL>;
            key-positions = <8 9>;
            timeout-ms = <40>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        star {
            bindings = <&kp STAR>;
            key-positions = <2 3>;
            timeout-ms = <40>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        slash {
            bindings = <&kp SLASH>;
            key-positions = <12 13>;
            timeout-ms = <40>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        lt_5 {
            bindings = <&lt 5 ESC>;
            key-positions = <30 31>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        DEF {
            bindings = <
&kp Q            &kp W        &kp E         &kp R         &kp T        &kp Y      &kp U              &kp I         &kp O            &kp P
&aml LEFT_GUI A  &aml LALT S  &asl LCTRL D  &aml LSHFT F  &kp G        &kp H      &amr LEFT_SHIFT J  &asr LCTRL K  &amr LALT L      &amr LEFT_GUI SQT
&kp Z            &kp X        &kp C         &kp V         &kp B        &kp N      &kp M              &kp COMMA     &ht RALT PERIOD  &kp SLASH
                                            &lt 1 SPACE   &lt 4 TAB    &lt 3 RET  &lt 2 BACKSPACE
            >;
        };

        NAV {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &kp K_REDO  &kp K_COPY  &kp UP_ARROW    &kp K_PASTE  &kp K_UNDO
&trans  &trans  &trans  &trans  &trans    &trans      &kp LEFT    &kp DOWN_ARROW  &kp RIGHT    &kp K_CUT
&trans  &trans  &trans  &trans  &trans    &trans      &kp HOME    &kp PAGE_DOWN   &kp PAGE_UP  &kp END
                        &trans  &trans    &trans      &kp DELETE
            >;
        };

        NUM {
            bindings = <
&kp LBKT   &kp N7  &kp N8  &kp N9  &kp RBKT     &trans  &trans  &trans  &trans  &trans
&kp SEMI   &kp N4  &kp N5  &kp N6  &kp EQUAL    &trans  &trans  &trans  &trans  &trans
&kp GRAVE  &kp N1  &kp N2  &kp N3  &kp BSLH     &trans  &trans  &trans  &trans  &trans
                           &kp N0  &kp MINUS    &trans  &trans
            >;
        };

        SYM {
            bindings = <
&kp LEFT_BRACE  &kp AMPERSAND    &kp ASTERISK  &kp MINUS             &kp RIGHT_BRACE          &trans  &trans  &trans  &trans  &trans
&kp COLON       &kp DOLLAR       &kp PERCENT   &kp CARET             &kp PLUS                 &trans  &trans  &trans  &trans  &trans
&kp TILDE       &kp EXCLAMATION  &kp AT_SIGN   &kp HASH              &kp PIPE                 &trans  &trans  &trans  &trans  &trans
                                               &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS    &trans  &trans
            >;
        };

        SYS {
            bindings = <
&kp F12  &kp F7  &kp F8  &kp F9  &trans            &trans  &trans  &trans  &trans  &trans
&kp F11  &kp F4  &kp F5  &kp F6  &studio_unlock    &trans  &trans  &trans  &trans  &trans
&kp F10  &kp F1  &kp F2  &kp F3  &bt BT_CLR        &trans  &trans  &trans  &trans  &trans
                         &trans  &trans            &trans  &trans
            >;
        };

        mouse {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &trans    &trans          &mmv MOVE_UP    &trans           &trans
&trans  &trans  &trans  &trans  &trans    &trans    &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans
&trans  &trans  &trans  &trans  &trans    &trans    &trans          &trans          &trans           &trans
                        &trans  &trans    &mkp MB1  &mkp MB2
            >;
        };
    };
};
