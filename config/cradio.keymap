#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    behaviors {
        s_left: s_left {
            compatible = "zmk,behavior-hold-tap";
            label = "s_left";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <32 33>;
            hold-trigger-on-release;
        };

        amr: alpha_mods_r {
            compatible = "zmk,behavior-hold-tap";
            label = "AMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <170>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <31 30>;
        };

        home__: home__ {
            compatible = "zmk,behavior-tap-dance";
            label = "HOME__";
            #binding-cells = <0>;
            bindings = <&mt PAGE_UP HOME>, <&kp LS(HOME)>;
        };

        end__: end__ {
            compatible = "zmk,behavior-tap-dance";
            label = "END__";
            #binding-cells = <0>;
            bindings = <&mt PAGE_DOWN END>, <&kp LS(END)>;
        };

        s_right: s_right {
            compatible = "zmk,behavior-hold-tap";
            label = "S_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <31 30>;
        };

        aml: aml {
            compatible = "zmk,behavior-hold-tap";
            label = "AML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <170>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <32 33>;
        };

        alt_f4: alt_f4 {
            compatible = "zmk,behavior-mod-morph";
            label = "ALT_F4";
            bindings = <&kp R>, <&kp F4>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
            keep-mods = <(MOD_LALT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
            layers = <0>;
            timeout-ms = <40>;
            require-prior-idle-ms = <150>;
        };

        ralt {
            bindings = <&kp RIGHT_ALT>;
            key-positions = <16 17>;
        };

        paren_l {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <1 2>;
        };

        parent_r {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <2 3>;
        };

        leftbrace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <11 12>;
        };

        rightbrace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <12 13>;
        };

        leftbraket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <21 22>;
        };

        rightbraket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <22 23>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <7 8>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <8 9>;
        };

        return {
            bindings = <&kp ENTER>;
            key-positions = <3 31>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        DEF {
            bindings = <
&kp Q            &kp W            &kp E         &alt_f4               &kp T        &kp Y      &kp U                  &kp I         &kp O            &kp P
&aml A LEFT_WIN  &aml LEFT_ALT S  &aml LCTRL D  &s_left LEFT_SHIFT F  &kp G        &kp H      &s_right LEFT_SHIFT J  &amr LCTRL K  &amr LEFT_ALT L  &amr LEFT_GUI SQT
&kp Z            &kp X            &kp C         &kp V                 &kp B        &kp N      &kp M                  &kp COMMA     &kp PERIOD       &lt 1 SLASH
                                                &lt 1 SPACE           &lt 4 TAB    &lt 3 RET  &lt 2 BACKSPACE
            >;
        };

        NAV {
            bindings = <
&trans  &trans  &trans   &trans  &trans    &kp LC(Y)   &kp LC(V)  &kp LC(C)       &kp LC(X)     &kp LC(Z)
&trans  &trans  &kp DEL  &trans  &trans    &kp LC(A)   &kp LEFT   &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT
&trans  &trans  &trans   &trans  &trans    &trans      &home__    &end__          &trans        &trans
                         &trans  &trans    &kp DELETE  &trans
            >;
        };

        NUM {
            bindings = <
&kp GRAVE  &kp N7  &kp N8  &kp N9  &trans           &trans  &trans    &trans    &trans        &trans
&trans     &kp N4  &kp N5  &kp N6  &kp SEMICOLON    &trans  &kp LEFT  &kp DOWN  &kp UP_ARROW  &kp RIGHT
&trans     &kp N1  &kp N2  &kp N3  &kp BSLH         &trans  &trans    &trans    &trans        &trans
                           &kp N0  &trans           &trans  &trans
            >;
        };

        SYM {
            bindings = <
&kp TILDE  &kp AMPERSAND    &kp ASTERISK  &kp UNDER  &kp PLUS     &trans  &trans  &trans  &trans  &trans
&trans     &kp DOLLAR       &kp PERCENT   &kp CARET  &kp COLON    &trans  &trans  &trans  &trans  &trans
&trans     &kp EXCLAMATION  &kp AT_SIGN   &kp HASH   &kp PIPE     &trans  &trans  &trans  &trans  &trans
                                          &trans     &trans       &trans  &trans
            >;
        };

        SYS {
            bindings = <
&kp F12  &kp F7  &kp F8  &kp F9  &kp PRINTSCREEN    &trans    &kp K_VOLUME_UP  &kp K_MUTE      &kp K_VOLUME_DOWN  &trans
&kp F11  &kp F4  &kp F5  &kp F6  &studio_unlock     &trans    &mmv MOVE_LEFT   &mmv MOVE_DOWN  &mmv MOVE_UP       &mmv MOVE_RIGHT
&kp F10  &kp F1  &kp F2  &kp F3  &bt BT_CLR         &trans    &msc SCRL_UP     &msc SCRL_DOWN  &trans             &trans
                         &trans  &trans             &mkp MB1  &mkp MB2
            >;
        };
    };
};
